# utils
alias ls="ls -lahFG"
alias bigf='find / -mount -type f -size +500M 2>/dev/null'

# git
alias g="git"

# npm
alias ni="npm install"
alias nis="npm install --save"
alias nisd="npm install --save-dev"
alias nig="npm install -g"
alias nl="npm link"
alias nr="npm run"
alias nt="npm test"
alias ns="npm start"

# yarn
alias y="yarn "
alias yi="yarn install"
alias yig="yarn global install"
alias yt="yarn test"
alias ya="yarn add"
alias yr="yarn remove"
alias ys="yarn start"
alias ycc="yarn cache clean"
alias yh="yarn help"
alias yo="yarn outdated"
alias yui="yarn upgrade-interactive"

# tmux
ta() {
  if ! tmux has-session 2>/dev/null; then
    echo "No tmux sessions found."
    return 1
  fi

  local session
  session=$(tmux list-sessions \
    -F "#{session_name} (#{session_windows} windows, #{session_created})" |
    fzf --prompt="üå∫ tmux sessions >> " \
        --border=rounded \
        --height=40% \
        --layout=reverse \
        --color=border:bright-green \
        --ansi \
        --preview-window=right:40% \
        --preview="echo {} | cut -d' ' -f1 | xargs -I{} tmux list-windows -t {}" |
    cut -d' ' -f1)

  if [ -n "$session" ]; then
    tmux attach -t "$session"
  fi
}
alias tl="tmux ls"
tk() {
  if ! tmux has-session 2>/dev/null; then
    echo "No tmux sessions to kill."
    return 1
  fi

  local sessions
  sessions=$(tmux list-sessions -F "#{session_name}" |
    fzf --multi \
        --prompt="kill tmux sessions >> " \
        --border=rounded \
        --height=40% \
        --layout=reverse \
        --color=border:bright-red) || return

  for s in $sessions; do
    tmux kill-session -t "$s" && echo "Killed session: $s"
  done
}
alias td="tmux detach"
alias tat="new-tmux-from-dir-name"

#macos
alias afk="open -a /System/Library/CoreServices/ScreenSaverEngine.app"

#laravel
alias a="php artisan"
alias af="php artisan migrate:fresh && php artisan db:seed"
function artisanMake() { php artisan make:$@ }
alias am="artisanMake"
alias al="php artisan list"
alias aq="php artisan queue:work"
alias at="php artisan test"
alias atink="php artisan tinker"

#composer
alias c="composer"
alias ci="composer install"
alias cr="composer require"
alias crd="composer require --dev"


alias yta=yta_func
alias mkcd=mkcd_func
alias gif=gif_func

# zig
alias z="zig"
alias zb="zig build"
alias zbr="zig build run"
alias zbrw="zig build run -fincremental --watch"
alias zt="zig test"
alias zr="zig run"
alias zf="zig fetch"

alias m="make"

# rust cargo
alias c="cargo"
alias cr="cargo run"
alias cb="cargo build"
alias cc="cargo check"
alias cdoc="cargo doc"

nnvim_update() {
  local orig_dir="$PWD"

  mkdir -p "$HOME/.bin/" 
  mkdir -p "$HOME/.nnvim-nightly/"
  cd "$HOME/.nnvim-nightly" || return 1

  curl -L -o nvim-macos-arm64.tar.gz https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz

  rm -rf nvim-nightly && mkdir nvim-nightly
  tar -xzf nvim-macos-arm64.tar.gz -C nvim-nightly --strip-components=1
  chmod +x nvim-nightly/bin/nvim
  xattr -c nvim-nightly/bin/nvim 2>/dev/null

  ln -sf "$HOME/.nnvim-nightly/nvim-nightly/bin/nvim" "$HOME/.bin/nnvim"
  rm -f *.tar.gz

  echo "-> Installed Neovim nightly ‚Üí $HOME/.bin/nnvim"

  cd "$orig_dir" || return 1
}

alias nnu="nnvim_update"
alias n="$HOME/.bin/nnvim"
alias nn='nvim'

alias nnu="nnvim_update"
alias n="$HOME/.bin/nnvim"
alias nn='nvim'


ai_commit() {
  set -e

  if git diff --cached --quiet; then
    echo "‚ùå No staged changes. Please run 'git add .' first."
    return 1
  fi

    GIT_PAGER=cat git diff --cached --no-color --unified=3 | \
  ollama run gemma3:12b --format '{"type": "object", "properties": {"commit_title": {"type": "string"}, "commit_body": {"type": "string"}}}' <<EOF | \
  jq -r '"\(.commit_title)\n\n\(.commit_body)"' | \
  git commit -F -
Given the git diff above, output a conventional commit message consisting of:

- a short descriptive title (max 12 words, imperative mood, lowercase)
- a list explaining why the changes were made or what they improve

Do not use backticks, quotes, or markdown.
Separate title and body with a single blank line.
EOF

#   GIT_PAGER=cat git diff --cached --no-color --unified=3 | \
#   ollama run qwen2.5-coder:7b <<EOF | git commit -F -
# Given a git diff above, output a convential commit message consistent of:
#
# - a short descriptive title (format: (area of code, e.g. nvim, ui-component name, service router) max 12 words, imperative mood, lowercase)
# - a list format explaination of why the changes were made or what it improves. 
#
# Do *not* output backticks, quotes, markdown, only plain text content.  You must output in the format of a convential git commit with no additional styling. Separate title and body with a single blank line.
#
# The format is as follows:
#
# {title}
#
# {body}
#
# EOF
}

alias ai="ai_commit"
