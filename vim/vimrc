set nocompatible
filetype off

" ----------------------------------------------------------------------------
" Plugs
" ----------------------------------------------------------------------------
" https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation
if has('nvim')
  if empty(glob("~/.local/share/nvim/site/autoload/plug.vim"))
    silent! execute '!curl -fsSLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * silent! PlugInstall
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
  endif
endif
call plug#begin()

" Writing
" ----------------------------------------------------------------------------
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'reedes/vim-pencil'
Plug 'reedes/vim-wordy'

" Lookin' good
" ----------------------------------------------------------------------------
Plug 'altercation/vim-colors-solarized'
Plug 'andreypopp/vim-colors-plain'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/vim-emoji'
Plug 'sonjapeterson/1989.vim'
Plug 'Lokaltog/vim-monotone'
Plug 'morhetz/gruvbox'
Plug 'tomspeak/vim-colors-paramount'
if exists('##TextYankPost')
  Plug 'machakann/vim-highlightedyank'
  let g:highlightedyank_highlight_duration = 400
endif
Plug 'RRethy/vim-hexokinase'
Plug 'nightsense/cosmic_latte'


" Syntax / Language specific
" ----------------------------------------------------------------------------
Plug 'sheerun/vim-polyglot'
Plug 'HerringtonDarkholme/yats.vim' "typescript syntax
Plug 'shmup/vim-sql-syntax'
Plug 'neoclide/coc.nvim', { 'do': { -> coc#util#install()} }
Plug 'leafgarland/typescript-vim', {'for': ['typescript', 'typescript.tsx']}
Plug 'ianks/vim-tsx', { 'for': 'typescript.tsx' }
Plug 'jxnblk/vim-mdx-js'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'neoclide/vim-jsx-improve'
Plug 'noahfrederick/vim-composer'
Plug 'noahfrederick/vim-laravel'


" Tim Pope
" ----------------------------------------------------------------------------
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'

" Movement
" ----------------------------------------------------------------------------
Plug 'bkad/CamelCaseMotion'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/vim-slash'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-user'
Plug 'mattn/emmet-vim'
Plug 'terryma/vim-multiple-cursors'

" Documentation / Generation / Code quality of life
" ----------------------------------------------------------------------------
Plug 'heavenshell/vim-jsdoc', { 'for': 'javascript' }
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'w0rp/ale'

" Utilities
" ----------------------------------------------------------------------------
Plug 'janko/vim-test'
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar', { 'for': ['javascript', 'typescript', 'go'], 'on': 'TagbarToggle' }
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'yssl/QFEnter'
augroup nerd_loader
  autocmd!
  autocmd VimEnter * silent! autocmd! FileExplorer
  autocmd BufEnter,BufNew *
        \  if isdirectory(expand('<amatch>'))
        \|   call plug#load('nerdtree')
        \|   execute 'autocmd! nerd_loader'
        \| endif
augroup END

if has('nvim')
  Plug 'Shougo/neosnippet.vim'
endif

call plug#end()
filetype plugin indent on

if !has('nvim')
  packadd! matchit "https://github.com/mhinz/vim-galore#matchit
endif

" ----------------------------------------------------------------------------
" General
" ----------------------------------------------------------------------------
if !exists('g:syntax_on') " https://stackoverflow.com/a/33380495/1355087
  syntax enable
endif
let g:seoul256_background = 236
let g:seoul256_light_background = 253
set background=light
"colorscheme paramount
colorscheme cosmic_latte
let g:gruvbox_contrast_light = 'medium'

let &t_ut=''

" allows local vimrc files to be loaded, but only allows secure commands
set exrc
set secure

set number " line numbers
set termguicolors
set autoindent
set smartindent
set laststatus=2
set showcmd
set backspace=indent,eol,start
set timeoutlen=500
set whichwrap=b,s
set shortmess=aIT
set hlsearch " CTRL-L / CTRL-R W
set incsearch
set hidden
set shortmess=aFc "https://github.com/neoclide/coc.nvim/issues/338#issuecomment-453981204
set cmdheight=1
set ignorecase smartcase
set wildmenu
set wildmode=full
set nojoinspaces
set autoread
set grepformat=%f:%l:%c:%m,%f:%l:%m
set complete=.,w,b,u,t,kspell
set completeopt=longest,menuone
set nocursorline
set nrformats=hex
silent! set cryptmethod=blowfish2

if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if has('mouse')
  set mouse=a
endif

set textwidth=0
if exists('&colorcolumn')
  set colorcolumn=100
endif

" Keep the cursor on the same column
set nostartofline

if exists('&fixeol')
  set nofixeol
endif

set ttyfast
set undolevels=200
set encoding=utf-8
set noswapfile
set scrolloff=999
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/
set wildignore+=node_modules/**
set wildignore+=**/node_modules/**
set wildignore+=bower_components/**
set wildignore+=dist/**
set showmatch
set autowrite
set title
set ai
set si
set linebreak
set wrap
set nolist
set textwidth=0
set wrapmargin=0
set spelllang=en_gb
set relativenumber
set hidden "allow :cdo to work
set guitablabel=\[%N\]\ %t\ %M  "buffer shows filename and modified symbol, not full path
set noshowmode
set fillchars=""
hi! EndOfBuffer guifg=bg "remove ~ gutter when file is too short for screen
set splitbelow
set splitright
set updatetime=300 "make coc.vim show errors faster

"----------------------------------------------------------------------------
" UI
" ----------------------------------------------------------------------------
set numberwidth=5
set guioptions-=r " disable right scroll in mac vim
set guioptions-=L "disable left scroll in macvim
set linespace=4
set cursorline
set cmdheight=2 "so coc.vim properly shows errors

"----------------------------------------------------------------------------
" Formatting
" ----------------------------------------------------------------------------
set expandtab
set autoindent
set tabstop=2
set shiftwidth=2
set smartindent
set smarttab
set clipboard=unnamed

"Return to last edit position when opening files
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
" Remember info about open buffers on close
set viminfo^=%

"Strip Whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" ----------------------------------------------------------------------------
" iTerm/Terminal
" NORMAL|VISUAL MODE = BLOCK CURSOR
" INSERT MODE = THIN CURSOR
" ----------------------------------------------------------------------------
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
end

" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------
nnoremap <SPACE> <Nop>
vnoremap <SPACE> <Nop>
"Map space to leader, maintains "showcmd" functionality
"& <leader>cc function
map <SPACE> <leader>

"Map leader to :Rg prompt
nnoremap \ :Rg<SPACE>

"CTRL-F to find and move to the next spelling error
"Then take the first substitution, if we do not like it
"<ESC>u will redo the replacement, but keep the mispelt word.
imap <c-f> <c-g>u<Esc>[s1z=`]a<c-g>u
nmap <c-f> [s1z=<c-o>

"bind CTRL-w to save
nnoremap <C-w> :w<CR>
"bind CTRL-q to close
nnoremap <C-q> :q<CR>
"bind CTRL-x to save-close
nnoremap <C-x> :x<CR>

"We all do it.
nmap :W :w
nmap :Q :q

"Bind Leaderq to close quickfix window
noremap <Leader>q :ccl<CR>
"Bind LeaderQ to focus the quickfix window
noremap <Leader>Q :copen<CR>

"bind K to grep word under cursor
nnoremap K :Rg "\b<C-R><C-W>\b"<CR><ENTER>:cw<CR>

"Disable esc from breaking modes
inoremap <C-c> <NOP>
vnoremap <C-c> <NOP>

"Make
inoremap <F5> <esc>:Make<cr>
nnoremap <F5> :Make<cr>

"Binds arrow keys to window resize
nmap <Left>  :3wincmd <<cr>
nmap <Right> :3wincmd ><cr>
nmap <Up>    :3wincmd +<cr>
nmap <Down>  :3wincmd -<cr>

"Use tab and shift-tab to cycle through windows
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

"this allows us, in visual mode, to press r and delete without putting into
"the register - essentially, overwrite and do nothing else.
vmap r "_dP

"Return - insert normal mode line break
nmap <Return> :normal O<CR>

" yank to EOL like it should
map Y y$

" paste over easier
map "p vi"p
map 'p vi'p

" Disable CTRL-A on tmux or on screen
if $TERM =~ 'screen'
  nnoremap <C-a> <nop>
  nnoremap <Leader><C-a> <C-a>
endif

"disable the command window, that annoying nuisance.
nnoremap q: :q

"easily edit .vimrc
nmap <Leader>ev :tabedit ~/dotfiles/vim/vimrc<CR>

"easily source .vimrc
nmap <Leader>sv :source ~/dotfiles/vim/vimrc<CR>

"easily edit snippets
nmap <Leader>es :tabedit ~/dotfiles/vim/vim/snippets/<CR>
nnoremap <leader>rs :call neosnippet#variables#set_snippets({})<CR>

"----------------------------------------------------------------------------
" PLUGINS
" ----------------------------------------------------------------------------

" NerdTree
" ----------------------------------------------------------------------------
map - :NERDTreeToggle<CR>
map _ :call ToggleNERDTreeFind()<CR>
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=30

function! ToggleNERDTreeFind()
    if !g:NERDTree.IsOpen()
        execute ':NERDTreeToggle'
        execute ':NERDTreeFind %'
    else
        execute ':NERDTreeFind %'
    endif
endfunction

" MultiCursor
" ----------------------------------------------------------------------------
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" vim-test
" ----------------------------------------------------------------------------
let test#strategy = "neovim"
let test#neovim#term_position = "vertical"

nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" FZF
" ----------------------------------------------------------------------------
" Hide statusline of terminal buffer
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

nnoremap <C-p> :Files<cr>

let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" JavaScript
" ----------------------------------------------------------------------------
let g:javascript_plugin_jsdoc = 1
let g:used_javascript_libs = 'underscore,backbone,react,flux,chai,handlebars,jquery,jasmine,ramda'
let g:jsx_ext_required = 1

" CamelCaseMotion
" ----------------------------------------------------------------------------
call camelcasemotion#CreateMotionMappings('<leader>')

" JSDoc
" ----------------------------------------------------------------------------
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_param_description_separator = ' - '

" QFEnter (QuickFix Opening )
" ----------------------------------------------------------------------------
let g:qfenter_keymap = {}
let g:qfenter_keymap.vopen = ['<C-v>']
let g:qfenter_keymap.hopen = ['<C-CR>', '<C-s>', '<C-x>']
let g:qfenter_keymap.topen = ['<C-t>']

" go.vim
" ----------------------------------------------------------------------------
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_auto_type_info = 1
let g:go_list_type="quickfix"
let g:go_fmt_command = "goimports"
let g:go_addtags_transform = "snakecase"
let g:go_snippet_engine = "neosnippet"

" tagbar.vim
" ----------------------------------------------------------------------------
inoremap <F8> <esc>:TagbarToggle<cr>
nnoremap <F8> :TagbarToggle<cr>
let g:tagbar_sort = 0
let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }

" ale.vim
" ----------------------------------------------------------------------------
let g:ale_linters = {
      \'javascript': ['eslint'],
      \'javascript.jsx': ['eslint'],
      \'typescript': ['eslint', 'tslint'],
      \'typescript.tsx': ['eslint', 'tslint'],
      \'html': [],
      \'scss': [],
      \'php': ['langserver', 'phpmd']
      \}
let g:ale_fixers = {
      \   'markdown': ['prettier'],
      \   'html': ['prettier'],
      \   'javascript': ['prettier'],
      \   'javascript.jsx': ['prettier'],
      \   'typescript': ['prettier'],
      \   'typescript.jsx': ['prettier'],
      \   'json': ['prettier'],
      \   'css': ['prettier'],
      \   'scss': ['prettier'],
      \   'php': ['prettier'],
      \   'blade': ['prettier']
      \}
let g:ale_typescript_tsserver_use_global = 1
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_lint_delay = 1000
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
hi clear SignColumn
highlight clear ALEErrorSign
highlight clear ALEWarningSign
hi ALEErrorSign guifg=#DF8C8C
hi ALEWarningSign guifg=#F2C38F

" goyo.vim + limelight.vim
" ----------------------------------------------------------------------------
let g:limelight_paragraph_span = 1
let g:limelight_priority = -1

function! s:goyo_enter() abort
  if has('gui_running')
    set fullscreen
    set background=dark
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif

  set noshowmode
  set noshowcmd
  set scrolloff=999
  setlocal spell

  Limelight
  TogglePencil
  PencilSoft

  let &l:statusline = '%M'
  hi StatusLine ctermfg=red guifg=red cterm=NONE gui=NONE
endfunction

function! s:goyo_leave() abort
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  endif

  set showmode
  set showcmd
  set scrolloff=5
  setlocal spell!

  Limelight!
  TogglePencil
  PencilOff
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

nnoremap <Leader>G :Goyo<CR>

" ag.vim
" ----------------------------------------------------------------------------
if executable('rg')
  set grepprg=rg\ --vimgrep
endif

"Make the QuickFix window automatically appear if :make has any errors.
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

" vim-slash
" ----------------------------------------------------------------------------
if has('timers')
  noremap <expr> <plug>(slash-after) slash#blink(2, 50)
endif

" vim-hexokinase
" ----------------------------------------------------------------------------
let g:Hexokinase_highlighters = ['virtual']
let g:Hexokinase_refreshEvents = ['BufWritePost']
let g:Hexokinase_ftAutoload = ['css', 'html', 'blade', 'scss', 'less', 'typescript', 'typescript.tsx', 'javascript', 'javascript.jsx']

" php
" ----------------------------------------------------------------------------
augroup PHP
  autocmd!
  autocmd FileType php setlocal iskeyword+=$
augroup end

let g:php_var_selector_is_identifier = 1

" nvim-typescript
" ----------------------------------------------------------------------------
let g:nvim_typescript#max_completion_detail = 100
let g:nvim_typescript#type_info_on_hold = 1
let g:nvim_typescript#signature_complete = 1

" neosnippet
" ----------------------------------------------------------------------------
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#disable_runtime_snippets = {
      \   '_' : 1,
      \ }
let g:neosnippet#scope_aliases = {}
let g:neosnippet#scope_aliases['javascript'] = 'javascript,javascript.jsx'
let g:neosnippet#snippets_directory='~/.config/nvim/snippets'

" STATUS LINE
" ----------------------------------------------------------------------------
if has('statusline')
  function! ALEWarnings() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '' : printf('  ⁕ %d ', all_non_errors)
  endfunction

  function! ALEErrors() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '' : printf(' ⁕ %d ', all_errors)
  endfunction

  function! ALEStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? '⁕' : ''
  endfunction

  function! S_modified() abort
    if &modified
      return emoji#for('raising_hand').' '
    elseif !&modifiable
      return emoji#for('construction').' '
    else
      return ''
    endif
  endfunction

  function! S_fugitive() abort
    if !exists('g:loaded_fugitive')
      return ''
    endif
    let head = fugitive#head()
    if empty(head)
      return ''
    else
      return head == 'master' ? emoji#for('crown') : emoji#for('hibiscus').' ['.head.']'
    endif
  endfunction

  let sep = '  '

  set laststatus=2
  set statusline=%<%f
  set statusline+=%w%h%{sep}

  set statusline+=%{S_modified()}%{sep}
  set statusline+=%{S_fugitive()}%{sep}

  set statusline+=\%=\%#StatusLineOk#%{ALEStatus()}
  set statusline+=\%#StatusLineError#%{ALEErrors()}
  set statusline+=\%#StatusLineWarning#%{ALEWarnings()}
endif

" Todo
" ----------------------------------------------------------------------------
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -niI -e TODO -e FIXME -e XXX 2> /dev/null',
        \ 'grep -rniI -e TODO -e FIXME -e XXX * 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction
command! Todo call s:todo()



" coc.vim
"
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
"nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gd <Plug>(coc-declaration)
nmap <silent> gh <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> <c-s>  :exe 'CocList -I --normal --input='.expand('<cword>').' symbols'<CR>

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ ],
      \              [ ],
      \              [ ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }
