set nocompatible
filetype off

" ----------------------------------------------------------------------------
" Plugs
" ----------------------------------------------------------------------------
call plug#begin()

" Writing
" ----------------------------------------------------------------------------
Plug 'junegunn/goyo.vim'
Plug 'reedes/vim-pencil'
Plug 'reedes/vim-wordy'
Plug 'junegunn/limelight.vim'

" Lookin' good
" ----------------------------------------------------------------------------
Plug 'sonjapeterson/1989.vim'
Plug 'junegunn/seoul256.vim'
Plug 'chriskempson/base16-vim'
Plug 'flazz/vim-colorschemes'
Plug 'junegunn/vim-emoji'

" Syntax / Language specific
" ----------------------------------------------------------------------------
Plug 'JulesWang/css.vim'
Plug 'ap/vim-css-color'
Plug 'cakebaker/scss-syntax.vim'
Plug 'fatih/vim-go'
Plug 'moll/vim-node'
Plug 'mxw/vim-jsx'
Plug 'nono/vim-handlebars'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'jparise/vim-graphql'

" Tim Pope
" ----------------------------------------------------------------------------
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'

" Movement
" ----------------------------------------------------------------------------
Plug 'bkad/CamelCaseMotion'
Plug 'christoomey/vim-sort-motion'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-user'
Plug 'mattn/emmet-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'thinca/vim-textobj-function-javascript'
Plug 'junegunn/vim-slash'

" Documentation / Generation / Code quality of life
" ----------------------------------------------------------------------------
Plug 'Raimondi/delimitMate'
Plug 'SirVer/ultisnips'
Plug 'heavenshell/vim-jsdoc'
Plug 'scrooloose/nerdcommenter'
Plug 'w0rp/ale'

" Utilities
" ----------------------------------------------------------------------------
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
augroup nerd_loader
  autocmd!
  autocmd VimEnter * silent! autocmd! FileExplorer
  autocmd BufEnter,BufNew *
        \  if isdirectory(expand('<amatch>'))
        \|   call plug#load('nerdtree')
        \|   execute 'autocmd! nerd_loader'
        \| endif
augroup END
Plug 'yssl/QFEnter'
Plug 'justinmk/vim-gtfo'

call plug#end()
filetype plugin indent on


" ----------------------------------------------------------------------------
" General
" ----------------------------------------------------------------------------
set t_Co=256
syntax on
set background=light
let g:seoul256_background = 236
let g:seoul256_light_background = 254
"colorscheme seoul256-light
colorscheme 1989

set nu
set autoindent
set smartindent
set laststatus=2
set showcmd
set backspace=indent,eol,start
set timeoutlen=500
set whichwrap=b,s
set shortmess=aIT
set hlsearch " CTRL-L / CTRL-R W
set incsearch
set hidden
set ignorecase smartcase
set wildmenu
set wildmode=full
set nojoinspaces
set autoread
set grepformat=%f:%l:%c:%m,%f:%l:%m
set completeopt=menuone,preview
set nocursorline
set nrformats=hex
silent! set cryptmethod=blowfish2

if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set textwidth=0
if exists('&colorcolumn')
  set colorcolumn=80
endif

" Keep the cursor on the same column
set nostartofline

if exists('&fixeol')
  set nofixeol
endif

set ttyfast
set undolevels=200
set encoding=utf-8
set noswapfile
set scrolloff=999
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/
set wildignore+=node_modules/**
set wildignore+=**/node_modules/**
set wildignore+=bower_components/**
set wildignore+=dist/**
set showmatch
set autowrite
set title
set ai
set si
set linebreak
set wrap
set nolist
set textwidth=0
set wrapmargin=0
set spelllang=en_gb
set relativenumber
set number
set complete+=kspell
set hidden "allow :cdo to work
set guitablabel=\[%N\]\ %t\ %M  "buffer shows filename and modified symbol, not full path
set noshowmode
set fillchars-=vert:\| | set fillchars+=vert:\
set splitbelow
set splitright

" ----------------------------------------------------------------------------
" UI
" ----------------------------------------------------------------------------
set numberwidth=5
set guioptions-=r " disable right scroll in mac vim
set guioptions-=L "disable left scroll in macvim
set linespace=4
set cursorline

" ----------------------------------------------------------------------------
" Formatting
" ----------------------------------------------------------------------------
set expandtab
set autoindent
set tabstop=2
set shiftwidth=2
set smartindent
set smarttab
set clipboard=unnamed

"Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

"Strip Whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" ----------------------------------------------------------------------------
" iTerm/Terminal
" ----------------------------------------------------------------------------
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
end

" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------
nnoremap <SPACE> <Nop>
vnoremap <SPACE> <Nop>
"Map space to leader, maintains "showcmd" functionality
"& <leader>cc function
map <SPACE> <leader>

"CTRL-F to find and move to the next spelling error
"Then take the first substitution, if we do not like it
"<ESC>u will redo the replacement, but keep the mispelt word.
imap <c-f> <c-g>u<Esc>[s1z=`]a<c-g>u
nmap <c-f> [s1z=<c-o>

"bind CTRL-w to save
nnoremap <C-w> :w<CR>
"bind CTRL-x to save-close
nnoremap <C-x> :x<CR>

"Bind Leaderq to close quickfix window
noremap <Leader>q :ccl<CR>
"Bind LeaderQ to focus the quickfix window
noremap <Leader>Q :copen<CR>

"bind \ to globally search for the entered term
nnoremap \ :Ag!<SPACE>

"bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR><ENTER>:cw<CR>

"Disable esc from breaking modes
inoremap <C-c> <NOP>
vnoremap <C-c> <NOP>

"Disable arrow keys, those dirty devils
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"Binds arrow keys to window resize
nmap <Left>  :3wincmd <<cr>
nmap <Right> :3wincmd ><cr>
nmap <Up>    :3wincmd +<cr>
nmap <Down>  :3wincmd -<cr>

"Use tab and shift-tab to cycle through windows
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

"this allows us, in visual mode, to press r and delete without putting into
"the register - essentially, overwrite and do nothing else.
vmap r "_dP

"We all do it.
nmap :W :w
nmap :Q :q

"Return - insert normal mode line break
nmap <Return> :normal O<CR>

" yank to EOL like it should
map Y y$

" paste over easier
map "p vi"p
map 'p vi'p


" ----------------------------------------------------------------------------
" PLUGINS
" ----------------------------------------------------------------------------

" NerdTree
" ----------------------------------------------------------------------------
map - :NERDTreeToggle<CR>
nmap <Leader>k :NERDTreeFind<CR>
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=30

" MultiCursor
" ----------------------------------------------------------------------------
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_next_key='<C-g>'

" FZF
" ----------------------------------------------------------------------------
nnoremap <C-p> :Files<cr>

" UltiSnips
" ----------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

" JavaScript
" ----------------------------------------------------------------------------
let g:javascript_plugin_jsdoc = 1
let g:used_javascript_libs = 'underscore,backbone,react,flux,chai,handlebars,jquery,jasmine'
let g:jsx_ext_required = 0

" CamelCaseMotion
" ----------------------------------------------------------------------------
call camelcasemotion#CreateMotionMappings('<leader>')

" JSDoc
" ----------------------------------------------------------------------------
nmap <silent> <Leader>jf ?function<cr>:noh<cr><Plug>(jsdoc)
nmap <silent> <Leader>j ?=><cr>:noh<cr><Plug>(jsdoc)
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_param_description_separator = ' - '

" QFEnter (QuickFix Opening )
" ----------------------------------------------------------------------------
let g:qfenter_vopen_map = ['<C-v>']
let g:qfenter_hopen_map = ['<C-CR>', '<C-s>', '<C-x>']
let g:qfenter_topen_map = ['<C-t>']

" go.vim
" ----------------------------------------------------------------------------
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

" ale.vim
" ----------------------------------------------------------------------------
let g:ale_statusline_format = [emoji#for('small_red_triangle').'%d', emoji#for('small_orange_diamond').'%d', '']
let g:ale_sign_error = emoji#for('small_red_triangle')
let g:ale_sign_warning = emoji#for('small_orange_diamond')
let g:ale_linters = {
  \'javascript': ['eslint'],
  \'html': [''],
\}
let g:ale_sign_column_always = 1
let g:ale_javascript_eslint_use_global = 1
hi clear SignColumn
highlight clear ALEErrorSign
highlight clear ALEWarningSign

" gtfo (open in finder/terminal)
" ----------------------------------------------------------------------------
let g:gtfo#terminals = { 'mac': 'iterm' }

" goyo.vim + limelight.vim
" ----------------------------------------------------------------------------
let g:limelight_paragraph_span = 1
let g:limelight_priority = -1

function! s:goyo_enter()
  if has('gui_running')
    set fullscreen
    set background=dark
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif

  set noshowmode
  set noshowcmd
  set scrolloff=999
  setlocal spell

  Limelight
  TogglePencil
  PencilSoft

  let &l:statusline = '%M'
  hi StatusLine ctermfg=red guifg=red cterm=NONE gui=NONE
endfunction

function! s:goyo_leave()
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  endif

  set showmode
  set showcmd
  set scrolloff=5
  setlocal spell!

  Limelight!
  TogglePencil
  PencilOff
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

nnoremap <Leader>G :Goyo<CR>

" ag.vim
" ----------------------------------------------------------------------------
if executable('ag')
  " Use Ag instead of grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" STATUS LINE
" ----------------------------------------------------------------------------
set statusline=%<[%n]\ %F\ %m%r%y\ %{exists('g:loaded_fugitive')?fugitive#statusline():''}\ %=%-14.(%l,%c%V%)\ %P
silent! if emoji#available()
  let g:currentmode={
    \ 'n'  : 'NORMAL',
    \ 'v'  : 'VISUAL',
    \ 'V'  : 'VISUAL LINE',
    \ '^V' : 'VISUAL BLOCK',
    \ 's'  : 'SELECT',
    \ 'S'  : 'SELECT LINE',
    \ '^S' : 'SELECT BLOCK',
    \ 'i'  : 'INSERT',
    \ 'R'  : 'REPLACE',
    \ 'Rv' : 'VISUAL REPLACE',
    \ 'c'  : ' ',
    \ 'cv' : ' ',
    \ 'ce' : ' ',
    \ 'r'  : ' ',
    \ 'rm' : ' ',
    \ 'r?' : ' ',
    \ '!'  : ' ',
    \ 't'  : ' '
    \}

  function! S_modified()
    if &modified
      return emoji#for('raising_hand').' '
    elseif !&modifiable
      return emoji#for('construction').' '
    else
      return ''
    endif
  endfunction

  function! S_fugitive()
    if !exists('g:loaded_fugitive')
      return ''
    endif
    let head = fugitive#head()
    if empty(head)
      return ''
    else
      return head == 'master' ? emoji#for('crown') : emoji#for('hibiscus').'['.head.']'
    endif
  endfunction

  hi def link User1 TablineFill
  let s:cherry = emoji#for('cherry_blossom')
  function! MyStatusLine()
    let mode = '   | %{toupper(g:currentmode[mode()])} | '
    let mod = '%{S_modified()}'
    let ro  = "%{&readonly ? emoji#for('lock') . ' ' : ''}"
    let fug = ' %{S_fugitive()}'
    let ale = ' %{ALEGetStatusLine()}'
    let sep = ' %= '

    return s:cherry.mode.' %f %<'.mod.ro.sep.fug.sep.sep.ale.sep
  endfunction

  " Note that the "%!" expression is evaluated in the context of the
  " current window and buffer, while %{} items are evaluated in the
  " context of the window that the statusline belongs to.
  set statusline=%!MyStatusLine()
endif

" Todo
" ----------------------------------------------------------------------------
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -niI -e TODO -e FIXME -e XXX 2> /dev/null',
            \ 'grep -rniI -e TODO -e FIXME -e XXX * 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction
command! Todo call s:todo()

" Slash
" ----------------------------------------------------------------------------
noremap <plug>(slash-after) zz
