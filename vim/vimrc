set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'JulesWang/css.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'SirVer/ultisnips'
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'amix/vim-zenroom2'
Plugin 'ap/vim-css-color'
Plugin 'bkad/CamelCaseMotion'
Plugin 'bling/vim-airline'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'christoomey/vim-sort-motion'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'junegunn/goyo.vim'
Plugin 'kana/vim-textobj-function'
Plugin 'kana/vim-textobj-user'
Plugin 'kien/ctrlp.vim'
Plugin 'mattn/emmet-vim'
Plugin 'mxw/vim-jsx'
Plugin 'nono/vim-handlebars'
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'reedes/vim-pencil'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'thinca/vim-textobj-function-javascript'
Plugin 'sjl/vitality.vim'
Plugin 'fatih/vim-go'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-sleuth'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'yssl/QFEnter'
Plugin 'w0ng/vim-hybrid'
Plugin 'chriskempson/base16-vim'


call vundle#end()
filetype plugin indent on


"Colors, etc.
set t_Co=256
syntax on
set background=light
colorscheme solarized


"Disable space so we can remap to leader
nnoremap <SPACE> <Nop>
vnoremap <SPACE> <Nop>
"Map space to leader, maintains "showcmd" functionality
"& <leader>cc function
map <SPACE> <leader>

"General
set ttyfast
set undolevels=200
set encoding=utf-8
set noswapfile
set scrolloff=5
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/
set wildignore+=node_modules/**
set wildignore+=**/node_modules/**
set wildignore+=bower_components/**
set wildignore+=dist/**
set ignorecase
set incsearch
set smartcase
set showmatch
set title
set autoread
set ai
set si
set linebreak
set wrap
set nolist
set textwidth=0
set wrapmargin=0
set spelllang=en_gb
set relativenumber
set number
set complete+=kspell
set hidden "allow :cdo to work
set guitablabel=\[%N\]\ %t\ %M  "buffer shows filename and modified symbol, not full path



"UI
set guifont=ProggyCleanTTSZ:h17
set numberwidth=5
set guioptions-=r " disable right scroll in mac vim
set guioptions-=L "disable left scroll in macvim
set linespace=2


"Formatting
set expandtab
set autoindent
set tabstop=2
set shiftwidth=2
set smartindent
set smarttab
set clipboard=unnamed

"Prose
"Pressing ,SS will toggle and untoggle spell checking
map <leader>SS :setlocal spell!<cr>

"CTRL-F to find and move to the next spelling error
"Then take the first substitution, if we do not like it
"<ESC>u will redo the replacement, but keep the mispelt word.
imap <c-f> <c-g>u<Esc>[s1z=`]a<c-g>u
nmap <c-f> [s1z=<c-o>

function! SetupWriting()
  :Goyo
  :TogglePencil
  :setlocal spell!
  :set background=dark
endfunction

nnoremap <silent> <leader>z :call SetupWriting()<CR>

"bind CTRL-w to save
nnoremap <C-w> :w<CR>

"bind CTRL-x to save-close
nnoremap <C-x> :x<CR>
"
"search for todos and open quick fix menu
nnoremap <leader>T :Ag! -i \(FIXME\)\\|\(TODO\)<cr>

"Bind Leaderq to close quickfix window
noremap <Leader>q :ccl<CR>
"Bind LeaderQ to focus the quickfix window
noremap <Leader>Q :copen<CR>

"bind \ to globally search for the entered term
nnoremap \ :Ag!<SPACE>

"bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR><ENTER>:cw<CR>

"Disable esc from breaking modes
inoremap <C-c> <NOP>
vnoremap <C-c> <NOP>

"Disable arrow keys, those dirty devils
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"Bind window navigation to hjkl
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"Use tab and shift-tab to cycle through windows
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

"this allows us, in visual mode, to press r and delete without putting into
"the register - essentially, overwrite and do nothing else.
vmap r "_dP

"We all do it.
nmap :W :w
nmap :Q :q

"Return - insert normal mode line break
nmap <Return> :normal O<CR><Down>

" yank to EOL like it should
map Y y$

" paste over easier
map "p vi"p
map 'p vi'p

"Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

"Strip Whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

"--------------
"   PLUGINS
"--------------

"NerdTree
map <C-n> :NERDTreeToggle<CR>
nmap <Leader>k :NERDTreeFind<CR>


"MultiCursor
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_next_key='<C-g>'


"Airline
let g:airline_theme = 'base16'
let g:Powerline_symbols = 'fancy'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':.'
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline_powerline_fonts = 1
let g:airline_section_b = ''
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline_section_z = ''
let g:airline_left_sep = ' '
let g:airline_right_sep = ' '


"Ctrl-P
"Clear cache on <leader>p
nnoremap<Leader>p :CtrlPClearCache<CR>
"Map to only look in the current directory
"For some reason it would not play nicely when you would nest into
"Directories
let g:ctrlp_cmd='CtrlP :pwd'


"UltiSnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

"JavaScript
let g:javascript_plugin_jsdoc = 1
let g:used_javascript_libs = 'underscore,backbone,react,flux,chai,handlebars,jquery,jasmine'

"CamelCaseMotion
call camelcasemotion#CreateMotionMappings('<leader>')


"JsDoc
"Bind Leaderjf to search for 'function
"Bind leaderj to search for es6 function
nmap <silent> <Leader>jf ?function<cr>:noh<cr><Plug>(jsdoc)
nmap <silent> <Leader>j ?=><cr>:noh<cr><Plug>(jsdoc)

let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_param_description_separator = ' - '


"QFENTER (QuickFix Opening)
"Replicate Ctrl-P mappings
let g:qfenter_vopen_map = ['<C-v>']
let g:qfenter_hopen_map = ['<C-CR>', '<C-s>', '<C-x>']
let g:qfenter_topen_map = ['<C-t>']



"vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1



"--------------
"   ENV
"--------------

if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif


" Use Ag if available
if executable('ag')
  " Use Ag instead of grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
